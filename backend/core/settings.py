"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import secrets
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets.token_hex(16)

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS: list[str] = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "celery": {
            "level": os.environ.get("BACKEND_LOG_LEVEL", "INFO"),
        },
        "backend": {
            "level": os.environ.get("BACKEND_LOG_LEVEL", "INFO"),
        },
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}

DEBUG = os.environ.get("debug") == "true"

REDIS_QUEUE_HOST = os.environ.get("REDIS_QUEUE_HOST", "localhost")
REDIS_RESULT_HOST = os.environ.get("REDIS_RESULT_HOST", "localhost")

REDIS_QUEUE_PASSWORD = os.environ.get("REDIS_QUEUE_PASSWORD", "")
REDIS_RESULT_PASSWORD = os.environ.get("REDIS_RESULT_PASSWORD", "")

REDIS_QUEUE_PORT = int(os.environ.get("REDIS_QUEUE_PORT", "6379"))
REDIS_RESULT_PORT = int(os.environ.get("REDIS_RESULT_PORT", "6379"))

INSTALLER_MAX_TASKS = int(os.environ.get("INSTALLER_MAX_TASKS", "26"))

REDIS_SECRET_KEY = os.environ.get(
    "REDIS_SECRET_KEY", "1InvkFDBGKDLpawxL6U2r0O4aVZJbPJI-XPwy7GudSs="
)

ALLOWED_HOST = os.environ.get("ALLOWED_HOST", "")
ALLOWED_ORIGIN = os.environ.get("ALLOWED_ORIGIN", "")

INSTALLER_IMAGE = os.environ.get(
    "image",
    "darkwind8/shapevpn:installer-latest",
)

REDIS_QUEUE = f"redis://:{REDIS_QUEUE_PASSWORD}@{REDIS_QUEUE_HOST}:{REDIS_QUEUE_PORT}/0"
REDIS_RESULT = (
    f"redis://:{REDIS_RESULT_PASSWORD}@{REDIS_RESULT_HOST}:{REDIS_RESULT_PORT}/0"
)

INSTALLER_NETWORK = os.environ.get("INSTALLER_NETWORK", "host")
if INSTALLER_NETWORK == "":
    network_args = {}
elif INSTALLER_NETWORK == "host":
    network_args = dict(network_mode="host")
else:
    network_args = dict(network=INSTALLER_NETWORK)
